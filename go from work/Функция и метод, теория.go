Если говорить именно о GO:

 
1. Функция представляет блок операторов, которые все вместе выполняют какую-то определенную задачу. С помощью функций можно многократно вызывать ее блок операторов как единое целое в других частях программы.

2. Метод представляет функцию, связанную с определенным типом. Методы определяются также как и обычные функции за тем исключением, что в определении метода также необходимо указать получателя или receiver. Получатель - это параметр того типа, к которому прикрепляется метод. Проще говоря: Метод - это функция с получателем.

Как объявляется функция:

func имя_функции (список_параметров) (типы_возвращаемых_значений){
    выполняемые_операторы
}

А вот так метод:

func (имя_параметра тип_получателя) имя_метода (параметры) (типы_возвращаемых_результатов){
    тело_метода
}

ВСЁ РАВНО НЕ ПОНЯТНО?
Давайте разберём на примере. Задача: Есть структура Person у которой есть параметры имени и возраста. Задача написать метод/функцию, которая выводит имя и возраст.
И так, как это выглядит, если бы мы делали через функцию:

package main
import "fmt"

//Создаем структуру 

type Person struct { 
   name string 
   age int
 }

//Создаем функцию, которая принимает строковое и целочисленное значение и выводит их

func aboutPerson(name string, age int) {
   fmt.Println(name, age)
}

//Создаем структуру tom, а затем обращаемся к функции, передавая параметры имени и возраста tom

func main() {
   var tom = Person{name: "Том", age: 35}
   aboutPerson(tom.name, tom.age)

} //ВЫВОД: Том 35

//Вроде бы все работает, но давайте тоже самое через метод:

------------------------------------------------------
package main

import "fmt"

// Структуры

type Person struct {
   name string
   age  int
}

// Создание метода

func (p Person) aboutPerson() {
   fmt.Println(p.name, p.age)
}

//Создаем структуру tom, а затем обращаемся к методу
func main() {
   var tom = Person{name: "Том", age: 35}
   tom.aboutPerson()

} //ВЫВОД: Том 35
//Как мы видим, использование метода в этом случае более обосновано. Код становится более понятным, не нужно каждый раз вручную прописывать параметры функции, обращаясь к параметрам структуры через точку, метод и так умеет с ними работать. Еще более понятным это становится на большем количестве:

func main() {
   var tom = Person{name: "Том", age: 35}
   var andrey = Person{name: "Андрей", age: 27}
   var leha = Person{name: "Лёха", age: 23}

   tom.aboutPerson()
   andrey.aboutPerson()
   leha.aboutPerson()
}

//А теперь представь, как было бы муторно прописывать параметры функции для каждого человека, чтобы просто вывести его имя и возраст. Более того, в функцию AboutPerson из первого примера, можно передать вообще любые значения, без привязки к структуре или конкретному множеству, что ни есть хорошо в данном случае.
 